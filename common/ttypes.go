// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package common

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type RequestHeader struct {
	RequestId string `thrift:"request_id,1" json:"request_id"`
	Seq       int32  `thrift:"seq,2" json:"seq"`
	Client    string `thrift:"client,3" json:"client"`
	Server    string `thrift:"server,4" json:"server"`
	Status    bool   `thrift:"status,5" json:"status"`
	Start     int64  `thrift:"start,6" json:"start"`
	End       int64  `thrift:"end,7" json:"end"`
}

func NewRequestHeader() *RequestHeader {
	return &RequestHeader{}
}

func (p *RequestHeader) GetRequestId() string {
	return p.RequestId
}

func (p *RequestHeader) GetSeq() int32 {
	return p.Seq
}

func (p *RequestHeader) GetClient() string {
	return p.Client
}

func (p *RequestHeader) GetServer() string {
	return p.Server
}

func (p *RequestHeader) GetStatus() bool {
	return p.Status
}

func (p *RequestHeader) GetStart() int64 {
	return p.Start
}

func (p *RequestHeader) GetEnd() int64 {
	return p.End
}
func (p *RequestHeader) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestHeader) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RequestId = v
	}
	return nil
}

func (p *RequestHeader) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Seq = v
	}
	return nil
}

func (p *RequestHeader) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Client = v
	}
	return nil
}

func (p *RequestHeader) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *RequestHeader) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *RequestHeader) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Start = v
	}
	return nil
}

func (p *RequestHeader) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.End = v
	}
	return nil
}

func (p *RequestHeader) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RequestHeader"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestHeader) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RequestId)); err != nil {
		return fmt.Errorf("%T.request_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request_id: %s", p, err)
	}
	return err
}

func (p *RequestHeader) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("seq", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:seq: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Seq)); err != nil {
		return fmt.Errorf("%T.seq (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:seq: %s", p, err)
	}
	return err
}

func (p *RequestHeader) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("client", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:client: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Client)); err != nil {
		return fmt.Errorf("%T.client (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:client: %s", p, err)
	}
	return err
}

func (p *RequestHeader) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:server: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return fmt.Errorf("%T.server (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:server: %s", p, err)
	}
	return err
}

func (p *RequestHeader) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:status: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Status)); err != nil {
		return fmt.Errorf("%T.status (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:status: %s", p, err)
	}
	return err
}

func (p *RequestHeader) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:start: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Start)); err != nil {
		return fmt.Errorf("%T.start (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:start: %s", p, err)
	}
	return err
}

func (p *RequestHeader) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:end: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.End)); err != nil {
		return fmt.Errorf("%T.end (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:end: %s", p, err)
	}
	return err
}

func (p *RequestHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestHeader(%+v)", *p)
}
